var searchIndex = {};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"ANSIGenericString","ansi_term","An ANSIGenericString includes a generic string type and a Style to display that string.  ANSIString and ANSIByteString are aliases for this type on str and [u8], respectively.",null,null],[3,"Prefix","","Like `ANSIString`, but only displays the style prefix.",null,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",null,null],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",0,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",1,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",1,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",1,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",1,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",1,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",1,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",1,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",1,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",1,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",1,null],[5,"ANSIStrings","","A function to construct an ANSIStrings instance.",null,null],[5,"ANSIByteStrings","","A function to construct an ANSIByteStrings instance.",null,null],[6,"ANSIString","","An ANSI String is a string coupled with the Style to display it in a terminal.",null,null],[6,"ANSIByteString","","An ANSIByteString represents a formatted series of bytes.  Use ANSIByteString when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",null,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ansigenericstring"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"infix"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write an ANSIByteString to an io::Write.  This writes the escape sequences for the associated Style around the bytes.",7,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"colour"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don't have to use Blue.normal() just to get blue text.",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"prefix","","The prefix for this colour.",1,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"suffix","","The suffix for this colour.",1,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"infix","","The infix between this colour and another.",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"infix"}}],[11,"bold","","Returns a Style with the bold property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the strikethrough property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new Style with no differences.",8,{"inputs":[],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"prefix","","The prefix for this style.",8,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"suffix","","The suffix for this style.",8,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"infix","","The infix between this style and another.",8,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"infix"}}],[11,"bold","","Returns a Style with the bold property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the hidden property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fg","","Returns a Style with the foreground colour property set.",8,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",8,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"style"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write ANSIByteStrings to an io::Write.  This writes the minimal escape sequences for the associated Styles around each set of bytes.",10,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[3,"ANSIGenericStrings"],[4,"Colour"],[3,"ANSIGenericString"],[3,"Prefix"],[3,"Suffix"],[3,"Infix"],[6,"ANSIString"],[6,"ANSIByteString"],[3,"Style"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["matrix_display"] = {"doc":"A simple library to visualize 2D matrixes in rust.","items":[[3,"Format","matrix_display","Format of a cell in a matrix",null,null],[12,"cell_w","","",0,null],[12,"cell_h","","",0,null],[3,"MatrixDisplay","","Stores a matrix of data and offers a way to pretty print it",null,null],[0,"cell","","Stores data to be printed by MatrixDisplay plus colour metada",null,null],[3,"AnsiColor","matrix_display::cell","A foreground and background color's ansi code",null,null],[12,"fg","","",1,null],[12,"bg","","",1,null],[3,"Cell","","A Matrix Cell that owns some data, a background color and a foreground color",null,null],[12,"value","","",2,null],[12,"color","","",2,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"ansicolor"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"ansicolor"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"ansicolor"}],"output":{"name":"bool"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"ansicolor"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"new","","Construct a cell with any data, and two ansi codes for the foreground and the background colors",2,{"inputs":[{"name":"t"},{"name":"u8"},{"name":"u8"}],"output":{"name":"cell"}}],[0,"matrix","matrix_display","Provides `Matrix` which stores a matrix of arbitrary data",null,null],[3,"Matrix","matrix_display::matrix","Stores a matrix of arbitrary data",null,null],[0,"position","","A simple human readable way of defining a position within a box",null,null],[4,"Position","matrix_display::matrix::position","Enum that describes a position within a rectangle",null,null],[13,"Top","","",3,null],[13,"Left","","",3,null],[13,"Right","","",3,null],[13,"Bottom","","",3,null],[13,"TopLeft","","",3,null],[13,"TopRight","","",3,null],[13,"BottomLeft","","",3,null],[13,"BottomRight","","",3,null],[13,"Middle","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"top","","Is it part of the top row?",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Is it part of the leftmost column?",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"right","","Is it part of the rightmost column?",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bottom","","Is it part of the bottom row?",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","matrix_display::matrix","Construct a matrix with the number of columns and the data represented as a row-major ordered `Vec`",4,{"inputs":[{"name":"usize"},{"name":"vec"}],"output":{"name":"matrix"}}],[11,"n_rows","","Number of rows in the matrix",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"n_cols","","Number of columns in the matrix",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"at","","Mutably access element at given position (row index, column index)",4,null],[11,"enumerate_cells","","View data stored in the matrix",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"style","matrix_display","Personalise the border style of your matric display",null,null],[4,"BordersStyle","matrix_display::style","An enum that represents different unicode borders styles",null,null],[13,"None","","✓✓",5,null],[13,"Plain","","",5,null],[13,"Retro","","+-+-+",5,null],[13,"Thin","","┌─┬─┐",5,null],[13,"Rounded","","╭─┬─╮",5,null],[13,"Thick","","┏━┳━┓",5,null],[13,"Double","","╔═╦═╗",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"bordersstyle"}],"output":{"name":"bool"}}],[11,"top_left_corner","","",5,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"top_right_corner","","",5,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"bottom_left_corner","","",5,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"bottom_right_corner","","",5,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"horizontal_border","","",5,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"top_intersection","","",5,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"left_intersection","","",5,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"right_intersection","","",5,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"bottom_intersection","","",5,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"intersection","","",5,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"vertical_border","","",5,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"new","matrix_display","",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"format"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"format"}}],[11,"new","","Construct a matrix display",6,{"inputs":[{"name":"format"},{"name":"matrix"}],"output":{"name":"matrixdisplay"}}],[11,"width","","The matrix's width in number of characters",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"height","","The matrix's height in number of characters",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"print","","Print a matrix. This is the most important method of this library",6,{"inputs":[{"name":"self"},{"name":"out"},{"name":"bordersstyle"}],"output":null}],[11,"coordinates_at_cursor_position","","Takes a cursor position in (usize, usize) and returns the coordinates of the cell under the cursor",6,null],[11,"cell_at_cursor_position","","Takes a cursor position in characters (x, y) and returns a mutable reference to the corresponding cell",6,null]],"paths":[[3,"Format"],[3,"AnsiColor"],[3,"Cell"],[4,"Position"],[3,"Matrix"],[4,"BordersStyle"],[3,"MatrixDisplay"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
initSearch(searchIndex);
